import os

# To run locally:
# snakemake --snakefile Snakefile_acr --keep-going --cores 4 --config folder=.. --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To visualise the pipeline
# snakemake --snakefile Snakefile_acr --config folder=.. --dag | dot -Tsvg > pipeline_acr.svg


localrules: all
ruleorder: pastml_drm_loc_subtree > timed_pastml_drm > pastml_drm_loc > pastml_loc > pastml_drm

folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, 'data')
metadata = os.path.join(data_dir, 'metadata.tab')

# choose one or more of the tree types below
tree_types = ['fast', 'phyml']

# The folder where the reconstructed ACR maps will be placed
maps_dir = 'maps'

# SDRMs to be analysed
DRMS = ['RT:M184V', 'RT:K103N', 'RT:D67N', 'RT:K70R', 'RT:Y181C']

location_col = 'Loc'

# Years to be analysed (for each year a tree will be produced containing only the tips sampled not-after this year)
# last is the latest year in the dataset, first is the first year containing a resistance mutation of interest,
# mid is the last year - 10.
YEARS = ['last', 'mid', 'first']

rule all:
    input:
        geo_map = expand(os.path.join(data_dir, maps_dir, '{type}', 'Loc_{loc}', 'geo_map_best_{type}_{loc}_tree.html'), \
        type=tree_types, loc=location_col),

        loc_maps = expand(os.path.join(data_dir, maps_dir, '{type}', 'Loc_{loc}', \
        'map_best.tree_{type}.location_{loc}.html'), \
        type=tree_types, loc=location_col),

        drm_maps = expand(os.path.join(data_dir, maps_dir, '{type}', 'DRM_{DRM}', 'pastml_{type}_best_tree.html'), \
        type=tree_types, DRM=DRMS),

        drm_loc_maps = expand(os.path.join(data_dir, maps_dir, '{type}', 'DRM_{DRM}', 'Loc_{loc}', \
        'pastml_{type}_best_tree.html'), type=tree_types, DRM=DRMS, loc=location_col),

        drm_timed_maps = expand(os.path.join(data_dir, maps_dir, '{type}', 'DRM_{DRM}', 'best_timed', \
        'pastml_{type}_tree.year_{r}.html'), r=YEARS, type=tree_types, DRM=DRMS),

        TDR_maps = expand(os.path.join(data_dir, maps_dir, '{type}', 'DRM_{DRM}', 'Loc_{loc1}', 'pastml_{type}_best_subtree.TDR_loc_{loc}.html'), \
        type=tree_types, DRM=DRMS, loc=location_col, loc1='Country')

rule timed_trees:
    '''
    Prunes a tree for a collections of years.
    '''
    input:
        tree = os.path.join(data_dir, '{n}', 'pastml_{type}_tree.nwk'),
        data = metadata
    output:
        trees = expand(os.path.join(data_dir, '{{n}}', 'pastml_{{type}}_tree.drm_{{drm}}.year_{r}.nwk'), r=YEARS)
    threads: 1
    params:
        mem = 1000,
        name = 'time_tree',
        tree = os.path.join(data_dir, '{n}', 'pastml_{type}_tree.drm_{drm}.year_{}.nwk'),
        drm = '{drm}',
        date_col = 'Year',
        qos = 'fast',
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell:
        """
        python3 {folder}/py/timeline_tree.py --in_tree {input.tree} --metadata {input.data} \
        --out_tree_pattern {params.tree} --drm {params.drm} --date_column {params.date_col}
        """

rule timed_pastml_drm:
    '''
    Reconstructs tree ancestral states with PASTML and visualises the result for a collections of years.
    '''
    input:
        trees = expand(os.path.join(data_dir, '{{n}}', 'pastml_{{type}}_tree.drm_{{drm}}.year_{r}.nwk'), r=YEARS),
        data = metadata,
        pars = os.path.join(data_dir, 'pastml', 'params.tree_{n}.type_{type}.drm_{drm}.csv')
    output:
        maps = expand(os.path.join(data_dir, maps_dir, '{{type}}', 'DRM_{{drm}}', '{{n}}_timed', 'pastml_{{type}}_tree.year_{r}.html'), r=YEARS)
    threads: 2
    params:
        mem = 1000,
        name = 'timed_map_{drm}',
        drm = '{drm}',
        date_col = 'Year',
        qos = 'fast',
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell:
        """
        python3 {folder}/py/acr.py --trees {input.trees} --data {input.data} --htmls {output.maps} \
        --columns {params.drm} --date_column {params.date_col} --parameters {input.pars}
        """

rule pastml_drm:
    '''
    Reconstructs tree ancestral states with PASTML and visualises the result.
    '''
    input:
        tree = os.path.join(data_dir, '{n}', 'pastml_{type}_tree.nwk'),
        data = metadata,
    output:
        map = os.path.join(data_dir, maps_dir, '{type}', 'DRM_{DRM}', 'pastml_{type}_{n}_tree.html'),
        pars = os.path.join(data_dir, 'pastml', 'params.tree_{n}.type_{type}.drm_{DRM}.csv')
    threads: 2
    params:
        mem = 4000,
        name = 'p_{n}_{DRM}',
        date_col = 'Year',
        qos = 'fast',
        drm = '{DRM}',
        work_dir = os.path.join(data_dir, 'pastml', 'drm_{DRM}', 'tree_{type}_{n}')
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell:
        """
         python3 {folder}/py/acr.py --trees {input.tree} --data {input.data} --htmls {output.map} \
        --columns {params.drm} --date_column {params.date_col} \
        --out_parameters {output.pars} --work_dir {params.work_dir}
        """

rule pastml_drm_loc:
    '''
    Reconstructs tree ancestral states with PASTML and visualises the result.
    '''
    input:
        tree = os.path.join(data_dir, '{n}', 'pastml_{type}_tree.nwk'),
        data = metadata,
        loc_pars = os.path.join(data_dir, 'pastml', 'params.tree_{n}.type_{type}.loc_{loc}.csv'),
        drm_pars = os.path.join(data_dir, 'pastml', 'params.tree_{n}.type_{type}.drm_{DRM}.csv'),
    output:
        map = os.path.join(data_dir, maps_dir, '{type}', 'DRM_{DRM}', 'Loc_{loc}', 'pastml_{type}_{n}_tree.html'),
        data = os.path.join(data_dir, 'pastml', 'pastml_{type}_{n}_tree_DRM_{DRM}_Loc_{loc}.tab'),
    threads: 2
    params:
        mem = 4000,
        name = 'pastml_{n}',
        date_col = 'Year',
        drm = '{DRM}',
        loc = '{loc}',
        qos = 'fast'
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell:
        """
        python3 {folder}/py/acr.py --trees {input.tree} --data {input.data} --htmls {output.map} \
        --columns {params.loc} {params.drm} --name_column {params.loc} --date_col {params.date_col} \
        --parameters {input.loc_pars} {input.drm_pars} --out_data {output.data}
        """

rule pastml_drm_loc_subtree:
    '''
    Reconstructs tree ancestral states with PASTML and visualises the result.
    '''
    input:
        tree = os.path.join(data_dir, '{n}', 'pastml_{type}_tree.nwk'),
        states = os.path.join(data_dir, 'pastml', 'pastml_{type}_{n}_tree_DRM_{DRM}_Loc_{loc}.tab'),
        data = metadata,
        drm_pars = os.path.join(data_dir, 'pastml', 'params.tree_{n}.type_{type}.drm_{DRM}.csv'),
    output:
        map = os.path.join(data_dir, maps_dir, '{type}', 'DRM_{DRM}', 'Loc_{loc1}', 'pastml_{type}_{n}_subtree.TDR_loc_{loc}.html'),
        subtree = temp(os.path.join(data_dir, '{n}', 'pastml_{type}_subtree.drm_{DRM}.loc_{loc}.loc1_{loc1}.nwk'))
    threads: 2
    params:
        mem = 4000,
        name = 'p_{n}_{DRM}_{loc1}',
        date_col = 'Year',
        drm = '{DRM}',
        loc = '{loc}',
        loc1 = '{loc1}',
        qos = 'fast'
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell:
        """
        python3 {folder}/py/find_TDR_root.py --tree {input.tree} --states {input.states} --drm {params.drm} \
        --loc {params.loc} --out_tree {output.subtree}

        python3 {folder}/py/acr.py --trees {output.subtree} --data {input.data} --htmls {output.map} \
        --columns {params.drm} {params.loc1} --name_column {params.loc1} --date_column {params.date_col} \
        --parameters {input.drm_pars}
        """

rule pastml_loc:
    '''
    Reconstructs tree ancestral states with PASTML and visualises the result.
    '''
    input:
        tree = os.path.join(data_dir, '{n}', 'pastml_{type}_tree.nwk'),
        data = metadata
    output:
        map = os.path.join(data_dir, maps_dir, '{type}', 'Loc_{loc}', 'map_{n}.tree_{type}.location_{loc}.html'),
        pars = os.path.join(data_dir, 'pastml', 'params.tree_{n}.type_{type}.loc_{loc}.csv'),
    threads: 2
    params:
        mem = 4000,
        name = 'pastml_{n}',
        loc = '{loc}',
        date_col = 'Year',
        qos = 'fast'
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell:
        """
        python3 {folder}/py/acr.py --trees {input.tree} --data {input.data} --htmls {output.map} \
        --columns {params.loc} --date_column {params.date_col} --out_parameters {output.pars} --verbose
        """

rule geomap:
    '''
    Reconstructs the geographical map coloured according to PastML categories.
    '''
    input:
        tree = os.path.join(data_dir, '{n}', 'pastml_{type}_{suffix}.nwk'),
        data = metadata
    output:
        geo_map = os.path.join(data_dir, maps_dir, '{type}', 'Loc_{loc}', 'geo_map_{n}_{type}_{loc}_{suffix}.html'),
    threads: 1
    params:
        mem = 4000,
        name = 'pastml_{n}',
        loc = '{loc}',
        country_col = 'Country',
        qos = 'fast'
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell:
        """
        python3 {folder}/py/get_geomap.py --tree {input.tree} --metadata {input.data} \
        --geo_html {output.geo_map} --location_col {params.loc} --country_col {params.country_col}
        """