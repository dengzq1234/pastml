import os

# To run locally:
# source activate snakemake
# snakemake --snakefile Snakefile_trees --keep-going --cores 4 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~"

# To run on tars:
# module load conda && source /local/gensoft2/exe/conda/3.19.0/conda/bin/activate snakemake && module load singularity
# snakemake --snakefile Snakefile_trees --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~" --cluster "sbatch -c {threads} -o logs/{params.name}.log -e logs/{params.name}.log --mem {params.mem} -A bioevo -p bioevo,dedicated,common --qos={params.qos} -J {params.name}" --jobs 300
# on bioevo:
# snakemake --snakefile Snakefile_trees --keep-going --cores 1 --use-singularity --singularity-prefix ~/.singularity --singularity-args "--home ~" --cluster "sbatch -c {threads} -o logs/{params.name}.log -e logs/{params.name}.log --mem {params.mem} -p bioevo --qos=bioevo -A bioevo -J {params.name}" --jobs 300

# To visualise the pipeline:
# module load graphviz
# snakemake --snakefile Snakefile_trees --dag | dot -Tsvg > trees_dag.svg


configfile: "config.yaml"
localrules: all, drm_data
ruleorder: raxml > phyml > fasttree > best_tree


folder = os.path.abspath(config["folder"])
data_dir = os.path.join(folder, config['data_dir'])
fasta_la = os.path.join(data_dir, config['fasta_la'])
fasta_phy = os.path.join(data_dir, config['fasta_phylotype'])
data_phy = os.path.join(data_dir, config['data_phylotype'])
metadata = os.path.join(data_dir, 'metadata.tab')

# Number of different tree topologies to be analysed
n=5

# choose one or more of the tree types below
tree_types = ['fast', 'raxml', 'phyml']

rule all:
    input:
        trees = expand(os.path.join(data_dir, '{n}', 'pastml_{type}_tree.nwk'), n=list(range(n)) + ['best'], type=tree_types),
        dists = expand(os.path.join(data_dir, 'distances_{type}_trees.tab'), type=tree_types + ['best'])

rule la_metadata:
    '''Keep only C sequences and rename the LA alignment'''
    input:
        fa = fasta_la
    output:
        fa = temp(os.path.join(data_dir, 'aln.la.c.fa')),
        data = temp(os.path.join(data_dir, 'data_la.tab'))
    params:
        mem = 2000,
        name = 'la_filter',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell: "python3 {folder}/py/la_metadata.py --output_data {output.data} --output_fa {output.fa} --input_fa {input.fa}"

rule rename_phy:
    '''Rename the Phylotype alignment'''
    input:
        fa = fasta_phy,
        data = data_phy
    output:
        fa = temp(os.path.join(data_dir, 'aln.phy.c.outgroup.fa')),
    params:
        mem = 2000,
        name = 'phy_renamer',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell: "python3 {folder}/py/rename_phy.py --input_data {input.data} --output_fa {output.fa} --input_fa {input.fa}"

rule merge_aln:
    '''Merges LA and Phylotype alignments'''
    input:
        fa_phy = os.path.join(data_dir, 'aln.phy.c.outgroup.fa'),
        fa_la = os.path.join(data_dir, 'aln.la.c.fa'),
    output:
        fa = temp(os.path.join(data_dir, 'aln.la.phy.c.outgroup.fa')),
    params:
        mem = 2000,
        name = 'aln_merge',
        qos = 'fast'
    threads: 8
    singularity: "docker://evolbioinfo/mafft:v7.313"
    shell:
        """
        mafft --thread {threads} --memsave --retree 1 --maxiterate 0 --add {input.fa_la} \
        --keeplength {input.fa_phy} > {output.fa}
        """

rule filter_aln:
    '''Filters out duplicated sequences (in terms of accession) from an alignment'''
    input:
        fa = os.path.join(data_dir, 'aln.la.phy.c.outgroup.fa'),
    output:
        fa = temp(os.path.join(data_dir, 'aln.fa')),
    params:
        mem = 2000,
        name = 'aln_filter',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell: "python3 {folder}/py/filter_unique_fasta_seq.py --fa_in {input.fa} --fa_out {output.fa}"


rule split_fa:
    '''
    Splits fasta into chunks.
    '''
    input:
        fa = os.path.join(data_dir, 'aln.fa')
    output:
        fa = temp(expand(os.path.join(data_dir, 'split_aln', 'aln.{n}.fa'), n=list(range(365))))
    params:
        mem = 1000,
        name = 'split',
        fa = os.path.join(data_dir, 'split_aln', 'aln.{}.fa'),
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell: "python3 {folder}/py/split_aln.py --out_aln_pattern {params.fa} --in_aln {input.fa}"


rule detect_recombinants:
    '''Detects recombinants in the alignment'''
    input:
        fa = os.path.join(data_dir, 'split_aln', 'aln.{n}.fa'),
        emission_priors = os.path.join(data_dir, 'jpHMM_files', 'priors', 'emissionPriors_HIV.txt'),
        transition_priors = os.path.join(data_dir, 'jpHMM_files', 'priors', 'transition_priors.txt'),
        aln = os.path.join(data_dir, 'jpHMM_files', 'input', 'HIV_alignment.fas'),
    output:
        os.path.join(data_dir, 'jpHMM_output', '{n}', 'recombination_without_positions.txt')
    params:
        mem = 80000,
        name = 'jpHMM_{n}',
        output_dir = os.path.join(data_dir, 'jpHMM_output', '{n}'),
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/jphmm:v03.2015"
    shell:
        """
        jpHMM -s {input.fa} -a {input.emission_priors} -b {input.transition_priors} -i {input.aln} -v HIV -o {params.output_dir}
        """

rule merge_md:
    '''Merges LA and Phylotype metadata'''
    input:
        data_phy = data_phy,
        data_la = os.path.join(data_dir, 'data_la.tab')
    output:
        data = temp(os.path.join(data_dir, 'data_la_phy.tab')),
    params:
        mem = 2000,
        name = 'md_merge',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell: "python3 {folder}/py/merge_md.py --data_phy {input.data_phy} --data_la {input.data_la} --data {output.data}"

rule drm_data:
    '''
    Extracts information about DRMs from Stanford DB (with sierra) and reformat it into a table.
    '''
    input:
        fasta = os.path.join(data_dir, 'aln.fa'),
    output:
        tab = temp(os.path.join(data_dir, 'drm_data.tab'))
    params:
        mem = 2000,
        name = 'sierra',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/sdrmhunter:v0.2.1.2"
    shell:
        """
        if [ -e {output.tab}.backup ]
        then
            cp {output.tab}.backup {output.tab}
        else
            sdrmhunter --fasta {input.fasta} --output {output.tab}
        fi
        """

rule metadata:
    '''
    Reformats the information about DRMs extracted from Stanford DB (with sierra) together with other metadata.
    '''
    input:
        drm_tab = os.path.join(data_dir, 'drm_data.tab'),
        data = os.path.join(data_dir, 'data_la_phy.tab'),
        rec = expand(os.path.join(data_dir, 'jpHMM_output', '{n}', 'recombination_without_positions.txt'), n=list(range(365))),
        fa = os.path.join(data_dir, 'aln.fa')
    output:
        data = metadata,
        fa = os.path.join(data_dir, 'alignment.fa')
    params:
        mem = 2000,
        name = 'metadata',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/prepare_metadata.py --drm_tab {input.drm_tab} --input_data {input.data} \
        --output_data {output.data} --output_fa {output.fa} --input_fa {input.fa} --subtype_data {input.rec}
        """

rule remove_recombinants:
    '''
    Remove recombinants from the alignment.
    '''
    input:
        aln = os.path.join(data_dir, 'alignment.fa'),
        tab = expand(os.path.join(data_dir, 'ids_{subtype}.txt'), subtype=['H', 'J', 'D', 'B', 'G', 'K', 'C'])
    output:
        aln = os.path.join(data_dir, 'alignment.norecombinants.fa')
    params:
        mem = 1000,
        name = 'rm_recomb',
        qos = 'fast',
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/filter_aln.py --out_aln {output.aln} --in_aln {input.aln} --ids {input.tab}
        """

rule clean_alignment:
    '''
    Removes the positions of DRMs from the alignment, in order not to influence the evolutionary history by drug
    selective pressure.
    '''
    input:
        fa = os.path.join(data_dir, 'alignment.norecombinants.fa'),
        data = metadata
    output:
        fa = os.path.join(data_dir, 'alignment.norecombinants.nodrm.fa'),
    params:
        mem = 1000,
        name = 'clean',
        PR_start_pos = 0,
        RT_start_pos = 99,
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/clean_aln.py --input_data {input.data} \
        --output_fa {output.fa} --input_fa {input.fa} --PR_start_pos {params.PR_start_pos} \
        --RT_start_pos {params.RT_start_pos}
        """

rule pars_trees:
    '''
    Generates n parsimonious starting trees with RAxML-NG.
    '''
    input:
        aln = os.path.join(data_dir, 'alignment.norecombinants.nodrm.fa')
    output:
        trees = os.path.join(data_dir, '{n}_pars_trees.nwk'),
    threads: 12
    singularity: "docker://evolbioinfo/raxml-ng:v0.8.0-beta"
    params:
        mem = 8000,
        name = 'rx_pars',
        n = '{n}',
        qos = 'fast'
    shell:
        """
        cd {data_dir}
        raxml-ng --start --tree pars{{{params.n}}} --model GTR+G6 --msa {input.aln} --msa-format FASTA --data-type DNA \
        --seed 239 --threads {threads} --force
        mv {input.aln}.raxml.startTree {output.trees}
        rm -rf {input.aln}.raxml.log
        rm -rf {input.aln}.raxml.rba
        """

rule split_nwk:
    '''
    Split multiple-tree newick file into multiple one-tree newick files.
    '''
    input:
        trees = os.path.join(data_dir, '%d_pars_trees.nwk' % n)
    output:
        expand(os.path.join(data_dir, '{n}', 'pars_tree.nwk'), n=range(n))
    params:
        mem = 1000,
        tree_pattern = os.path.join(data_dir, '%s', 'pars_tree.nwk'),
        name = 'split_nwk',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell: "python3 {folder}/py/split_nwk.py --trees {input.trees} --pattern {params.tree_pattern}"

rule fasttree:
    '''
    Reconstructs a tree with FastTree.
    '''
    input:
        aln = os.path.join(data_dir, 'alignment.norecombinants.nodrm.fa'),
        tree = os.path.join(data_dir, '{n}', 'pars_tree.nwk')
    output:
        tree = os.path.join(data_dir, '{n}', 'fast_tree.nwk'),
        log = os.path.join(data_dir, '{n}', 'fast_tree.log')
    threads: 12
    singularity: "docker://evolbioinfo/fasttree:v2.1.10"
    params:
        mem = 8000,
        name='fast_{n}',
        qos = 'normal'
    shell: "FastTree -gamma -nt -gtr -cat 6 -slow -intree {input.tree} -log {output.log} < {input.aln} > {output.tree}"


rule convert_alignment:
    '''
    Filter and convert a fasta alignment to another format.
    '''
    input:
        fa = os.path.join(data_dir, 'alignment{af}.fa')
    output:
        fa = os.path.join(data_dir, 'alignment{af}.phylip')
    params:
        mem = 1000,
        name = 'fa2phylip',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell: "python3 {folder}/py/convert_aln.py --output_fa {output.fa} --input_fa {input.fa} --format phylip"


rule phyml:
    '''
    Reconstructs a tree with PhyML.
    '''
    input:
        aln = os.path.join(data_dir, 'alignment.norecombinants.nodrm.phylip'),
        tree = os.path.join(data_dir, '{n}', 'pars_tree.nwk')
    output:
        aln = temp(os.path.join(data_dir, '{n}', 'phyml_alignment.norecombinants.nodrm.fa')),
        tree = os.path.join(data_dir, '{n}', 'phyml_tree.nwk'),
        log = os.path.join(data_dir, '{n}', 'phyml_tree.log')
    threads: 1
    singularity: "docker://evolbioinfo/phyml:v3.3.20180621"
    params:
        mem = 4000,
        name = 'phyml_{n}',
        qos = 'long'
    shell:
        """
        cp {input.aln} {output.aln}
        phyml -i {output.aln} -d nt -m GTR -o tlr -f m -c 6 -a e -s RAND -u {input.tree} --r_seed 239 --leave_duplicates
        mv {output.aln}_phyml_tree* {output.tree}
        mv {output.aln}_phyml_stats* {output.log}
        """

rule raxml:
    '''
    Reconstructs a tree with RAxML-NG.
    '''
    input:
        aln = os.path.join(data_dir, 'alignment.norecombinants.nodrm.fa'),
        tree = os.path.join(data_dir, '{n}', 'pars_tree.nwk')
    output:
        aln = temp(os.path.join(data_dir, '{n}', 'raxml_alignment.norecombinants.nodrm.fa')),
        tree = os.path.join(data_dir, '{n}', 'raxml_tree.nwk'),
        log = os.path.join(data_dir, '{n}', 'raxml_tree.log'),
    threads: 12
    singularity: "docker://evolbioinfo/raxml-ng:v0.8.0-beta"
    params:
        mem = 8000,
        name = 'rx_{n}',
        dir = os.path.join(data_dir, '{n}'),
        qos = 'long'
    shell:
        """
        cd {params.dir}
        cp {input.aln} {output.aln}
        raxml-ng --tree {input.tree} --model GTR+G6 --msa {output.aln} --msa-format FASTA --data-type DNA \
        --seed 239 --threads {threads} --force
        cp {output.aln}.raxml.bestTree {output.tree}
        cp {output.aln}.raxml.log {output.log}
        """

rule get_seq_ids:
    '''
    Extract sequence ids of interest.
    '''
    input:
        tab = metadata
    output:
        tab = os.path.join(data_dir, 'ids_{subtype}.txt')
    params:
        mem = 500,
        name = 'ids_{subtype}',
        col_value = '{subtype}',
        col_name = 'jpHMM_subtype',
        qos = 'fast'
    threads: 1
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/get_seq_ids.py --input_data {input.tab} --output_data {output.tab} \
        --col_name {params.col_name} --col_value {params.col_value}
        """

rule root:
    '''
    Root a tree using an ingroup.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
        ids = [os.path.join(data_dir, 'ids_C.txt')]
    output:
        tree = os.path.join(data_dir, '{tree}.rooted.nwk')
    threads: 1
    params:
        mem = 500,
        name='root',
        qos = 'fast'
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:  "python3 {folder}/py/root.py --input_tree {input.tree} --ids {input.ids} --output_tree {output.tree} --ingroup"

rule collapse:
    '''
    Collapses branches using a certain criterion.
    '''
    input:
        tree = os.path.join(data_dir, '{tree}.nwk'),
    output:
        tree = os.path.join(data_dir, '{tree}.collapsed_{feature}_{threshold}.nwk'),
    threads: 1
    params:
        mem = 500,
        name='collapse_{feature}_{threshold}',
        threshold='{threshold}',
        feature='{feature}',
        qos = 'fast'
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/collapse.py --input_tree {input.tree} --feature {params.feature} \
        --output_tree {output.tree} --threshold {params.threshold}
        """

rule pastml_tree:
    '''
    Copies a tree with a certain name into a pastml tree and names its nodes
    '''
    input:
        tree=os.path.join(data_dir, '{n}', '{type}_tree.rooted.collapsed_dist_0.nwk'),
    output:
        tree=os.path.join(data_dir, '{n}', 'pastml_{type}_tree.nwk'),
    threads: 1
    params:
        mem = 1000,
        name = 'name_{n}',
        qos = 'fast'
    singularity: "docker://evolbioinfo/pastml:v1.9.1"
    shell: "python3 {folder}/py/name_tree.py --input_tree {input.tree} --output_tree {output.tree}"

rule best_tree:
    '''
    Copies a tree with the highest likelihood in the best folder
    '''
    input:
        trees=expand(os.path.join(data_dir, '{m}', '{{type}}_tree.nwk'), m=range(n)),
        logs=expand(os.path.join(data_dir, '{m}', '{{type}}_tree.log'), m=range(n)),
    output:
        tree=os.path.join(data_dir, 'best', '{type}_tree.nwk'),
        log=os.path.join(data_dir, 'best', '{type}_tree.log'),
    threads:
        1
    params:
        mem = 1000,
        name = 'best_{type}',
        type = '{type}',
        qos = 'fast'
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/get_best_tree.py --trees {input.trees} --logs {input.logs} \
        --out_tree {output.tree} --out_log {output.log} --type {params.type}
        """

rule compare_trees:
    '''
    Calculates RF and quantet distances between the trees.
    '''
    input:
        trees = os.path.join(data_dir, '{trees}.nwk'),
        names = os.path.join(data_dir, '{trees}.names'),
        qt = os.path.join(data_dir, 'distances_{trees}.quartet.tab'),
    output:
        log = os.path.join(data_dir, 'distances_{trees}.tab')
    threads: int(n * (n - 1) / 2)
    params:
        mem = 10000,
        name = 'dist_{trees}',
        qos = 'fast'
    singularity: "docker://evolbioinfo/python-evol:v3.6"
    shell:
        """
        python3 {folder}/py/compare_trees.py --trees {input.trees} --labels {input.names} \
        --output {output.log} --qt {input.qt}
        """

rule merge_nwk_best:
    '''
    Merge multiple one-tree newick files into one multiple-tree newick file.
    '''
    input:
        trees = expand(os.path.join(data_dir, 'best', '{type}_tree.nwk'), type=tree_types)
    output:
        trees = os.path.join(data_dir, 'best_trees.nwk'),
        names = os.path.join(data_dir, 'best_trees.names')
    params:
        mem = 1000,
        name = 'merge_nwk',
        qos = 'fast',
        names = '\t'.join(tree_types)
    threads: 1
    shell:
        """
        ls {input.trees} | xargs cat >> {output.trees}
        echo "{params.names}" >> {output.names}
        """

rule merge_nwk_same_type:
    '''
    Merge multiple one-tree newick files into one multiple-tree newick file.
    '''
    input:
        trees = expand(os.path.join(data_dir, '{n}', '{{type}}_tree.nwk'), n=range(n))
    output:
        trees = os.path.join(data_dir, '{type}_trees.nwk'),
        names = os.path.join(data_dir, '{type}_trees.names')
    params:
        mem = 1000,
        name = 'merge_nwk',
        qos = 'fast',
        names = '\t'.join(str(_) for _ in range(n))
    threads: 1
    shell:
        """
        ls {input.trees} | xargs cat >> {output.trees}
        echo "{params.names}" >> {output.names}
        """

rule quartet_dists:
    '''
    Calculates quartet distances with tqDist.
    '''
    input:
        trees = os.path.join(data_dir, '{trees}.nwk')
    output:
        log = temp(os.path.join(data_dir, 'distances_{trees}.quartet.tab')),
    threads: 1
    singularity: "docker://evolbioinfo/tqdist:v1.0.1"
    params:
        mem = 8000,
        name = 'tqdist_{trees}',
        qos = 'fast'
    shell: "all_pairs_quartet_dist {input} {output}"

